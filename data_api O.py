import requests
import csv
from datetime import datetime, timedelta
import pandas as pd

# Define your API key
api_key = '82e3b9e8650260f04ede50fd59e999b2'

# List of coordinates
coordinates = [
    (8.26293, 4.15496),
    (8.26912, 4.30147),
    (8.20914, 4.10217),
    (8.28035, 4.17911),
    (8.24450, 4.28512),
    (8.06736, 4.23500),
    (8.13177, 4.05139),
    (8.17012, 3.97284),
    (8.16103, 4.21702),
    (8.05310, 4.13733),
    (8.28650, 4.38449),
    (8.10507, 4.30148),
    (8.10585, 4.20838),
    (8.08202, 4.04051),
    (8.00839, 3.99345),
    (8.24841, 4.07799),
    (8.04688, 4.01750),
    (8.06313, 4.04897),
    (7.95010, 4.00842),
    (8.09174, 4.01770),
    (7.93039, 3.99624),
    (8.34520, 4.23949),
    (8.04263, 4.07845),
    (8.07429, 4.30936),
    (7.95345, 4.05403),
    (8.13242, 4.40264),
    (8.00578, 3.98706),
    (8.21168, 4.10393),
    (8.06831, 4.12685),
    (7.96902, 4.44864),
    (7.93586, 4.17951),
    (8.13243, 4.40304),
    (8.01772, 4.18653),
    (8.11615, 4.15767),
    (8.19859, 4.44016),
    (8.30715, 4.30314),
    (8.34183, 4.30236),
    (8.35061, 4.27220),
    (8.32615, 4.13798),
    (7.99313, 4.22274),
    (8.26147, 4.15912),
    (8.03918, 3.99392),
    (8.12731, 4.32282),
    (7.98183, 4.03002),
    (7.96316, 4.33417),
    (7.96580, 4.13706),
    (8.23612, 4.20523),
    (8.17644, 4.11918),
    (8.25177, 4.27567),
    (8.13884, 4.03558),
    (7.95474, 4.32432),
    (8.12881, 4.05091),
    (8.00898, 4.06145),
    (8.29238, 4.16788),
    (8.30670, 4.38379),
    (8.18161, 4.22154),
    (8.22085, 4.10731),
    (7.97126, 3.98690),
    (8.04181, 4.10971),
    (8.24252, 4.17954),
    (8.13453, 4.40892),
    (8.16933, 3.97235),
    (8.00841, 4.06070),
    (8.10115, 4.11482),
    (7.96740, 4.17787),
    (8.09238, 4.00708),
    (8.18267, 4.16426),
    (8.10366, 4.04506),
    (8.25122, 4.26963),
    (8.15284, 4.05738),
    (8.05773, 4.02060),
    (8.21917, 3.99931),
    (8.06572, 4.32206),
    (8.30238, 4.03661),
    (8.06384, 4.27764),
    (8.08198, 4.15622),
    (8.22489, 3.97751),
    (8.09122, 4.20627),
    (8.07319, 4.16621),
    (8.04454, 4.08444),
    (8.29789, 4.19012),
    (7.94564, 4.31562),
    (8.18080, 4.38153),
    (7.92761, 3.97380),
    (8.05360, 3.97202),
    (8.16528, 4.15069),
    (7.98082, 3.97633),
    (8.21096, 4.19493),
    (8.14775, 4.00720),
    (7.95537, 4.05736),
    (8.09620, 4.20265),
    (8.06916, 4.26562),
    (8.13369, 4.40794),
    (7.97449, 3.99910),
    (8.34886, 4.24306),
    (8.06715, 4.23483),
    (8.05568, 4.22838),
    (8.02341, 4.19398),
    (8.22143, 3.99867),
    (8.24152, 4.16254),
    (8.34397, 4.29775),
    (8.10189, 4.21180),
    (8.18624, 4.33114),
    (8.13634, 4.26389),
    (8.34665, 4.25881),
    (7.93905, 4.01093),
    (8.06205, 4.09414),
    (7.96807, 4.11093),
    (8.05768, 3.97104),
    (7.95826, 3.99814),
    (8.05810, 4.09866),
    (8.24743, 4.16474),
    (8.13561, 4.40925),
    (8.25032, 4.18013),
    (8.04099, 4.14727),
    (8.12125, 4.32260),
    (8.28059, 4.08284),
    (8.06684, 4.11720),
    (8.14878, 4.11218),
    (8.38844, 4.06955),
    (8.24032, 4.15840),
    (7.95049, 4.17265),
    (7.99815, 4.05372),
    (8.24722, 4.16458),
    (7.92655, 4.33626),
    (8.24027, 4.34330),
    (7.98184, 4.07037),
    (8.21829, 3.99900),
    (8.27566, 4.25036),
    (8.14668, 4.15480),
    (8.20656, 4.09983),
    (8.32928, 4.37273),
    (8.01472, 4.17038),
    (8.05435, 4.22964),
    (7.99946, 4.22074),
    (8.07713, 4.21512),
    (8.41525, 4.22748),
    (8.15794, 4.17735),
    (8.35253, 4.30895),
    (8.06175, 4.00323),
    (7.93117, 4.01862),
    (8.29297, 4.38838),
    (8.04087, 4.15828),
    (8.02857, 4.08576),
    (8.00286, 4.08054),
    (8.07885, 4.34452),
    (8.04670, 4.00214),
    (7.98914, 4.02469),
    (8.36453, 4.17327),
    (8.05408, 4.13846),
    (8.29525, 4.28925),
    (8.01461, 4.01981),
    (8.16879, 4.12272),
    (8.24660, 4.16353),
    (8.27326, 4.32164),
    (8.03561, 4.14724),
    (8.05502, 4.03120),
    (7.99994, 4.05834),
    (8.32578, 4.29474),
    (8.24992, 4.16301),
    (8.18017, 4.03129),
    (7.98060, 3.97368),
    (8.27035, 4.37314),
    (7.99711, 4.05084),
    (8.34830, 4.25482),
    (7.98702, 3.97981),
    (7.99697, 4.05466),
    (8.06968, 4.02359),
    (8.05516, 4.02136),
    (8.09494, 4.23932),
    (8.07986, 4.11370),
    (8.07767, 4.25169),
    (7.94565, 4.13222),
    (8.07477, 4.11656),
    (8.35500, 4.19493),
    (8.16889, 4.14591),
    (8.07249, 4.32902),
    (8.11249, 4.17940),
    (8.07150, 4.07073),
    (8.25063, 4.25424),
    (8.27346, 4.34961),
    (8.33690, 4.28613),
    (8.33044, 4.21616),
    (8.00642, 4.16330),
    (8.22605, 4.08784),
    (7.94570, 4.03710),
    (8.16081, 4.23870),
    (8.05355, 3.97198),
    (7.98094, 4.00451),
    (7.99337, 4.16146),
    (8.22475, 4.08411),
    (8.24618, 4.16312),
    (8.06878, 4.17138),
    (8.01665, 4.03127),
    (8.05687, 4.10057),
    (8.17723, 4.12138),
    (8.36177, 4.10706),
    (8.05157, 4.10331),
    (7.98483, 4.36091),
    (8.09235, 4.19920),
    (8.28386, 4.35988),
    (7.93181, 4.02544),
    (8.01768, 4.18650),
    (7.96990, 3.98060),
    (8.11556, 4.12183),
    (8.06300, 4.04583),
    (8.05289, 4.15037),
    (8.18156, 4.32265),
    (8.03578, 4.14930),
    (8.41065, 4.32557),
    (8.25123, 4.26751),
    (8.24397, 4.12822),
    (8.23738, 4.39200),
    (8.28040, 4.24101),
    (8.18689, 4.17314),
    (8.30396, 4.19214),
    (8.36726, 4.28153),
    (8.34279, 4.12185),
    (8.16567, 4.06951),
    (8.22879, 4.17821),
    (8.23867, 4.00795),
    (8.13599, 4.18657),
    (8.10374, 4.04477),
    (8.17982, 4.44885),
    (8.23236, 4.26584),
    (8.12457, 4.20407),
    (8.17538, 4.15762),
    (8.25967, 4.25112),
    (8.20654, 4.19229),
    (8.16502, 4.03866),
    (8.32299, 4.31212),
    (8.07720, 4.21466),
    (8.07132, 4.01429),
    (8.26213, 4.13871),
    (8.29593, 4.17976),
    (8.00793, 4.16461),
    (7.93599, 4.00234),
    (7.99585, 4.06524),
    (8.31365, 4.30077),

]

# Date range
start_date = datetime(2023, 11, 1)
end_date = datetime(2024, 3, 30)

# Function to make API request
def fetch_air_pollution_data(lat, lon, start_timestamp, end_timestamp, api_key):
    url = f'http://api.openweathermap.org/data/2.5/air_pollution/history?lat={lat}&lon={lon}&start={start_timestamp}&end={end_timestamp}&appid={api_key}'
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Error: {response.status_code} for {lat}, {lon} from {start_timestamp} to {end_timestamp}")
        return None

# Function to calculate weekly averages
def calculate_weekly_averages(data):
    weekly_sum = {}
    count = 0
    for entry in data['list']:
        count += 1
        for param, value in entry['components'].items():
            weekly_sum[param] = weekly_sum.get(param, 0) + value
    weekly_average = {param: value / count for param, value in weekly_sum.items()}
    return {
        'aqi': weekly_average.get('aqi', None),
        'co': weekly_average.get('co', None),
        'no': weekly_average.get('no', None),
        'no2': weekly_average.get('no2', None),
        'o3': weekly_average.get('o3', None),
        'so2': weekly_average.get('so2', None),
        'pm2_5': weekly_average.get('pm2_5', None),
        'pm10': weekly_average.get('pm10', None),
        'nh3': weekly_average.get('nh3', None)
    }

# Collect data for all coordinates and dates
weekly_averages = {}
current_date = start_date
while current_date <= end_date:
    end_of_week = current_date + timedelta(days=6)
    if end_of_week > end_date:
        end_of_week = end_date

    for lat, lon in coordinates:
        start_timestamp = int(current_date.timestamp())
        end_timestamp = int((end_of_week + timedelta(days=1)).timestamp())
        data = fetch_air_pollution_data(lat, lon, start_timestamp, end_timestamp, api_key)
        if data and 'list' in data:
            weekly_averages[(lat, lon, current_date.strftime('%Y-%m-%d'))] = calculate_weekly_averages(data)

    current_date += timedelta(days=7)

# Save data to CSV
csv_file = 'weekly_All_24_O.csv'
csv_columns = ['latitude', 'longitude', 'start_date', 'end_date', 'aqi', 'co', 'no', 'no2', 'o3', 'so2', 'pm2_5', 'pm10', 'nh3']
try:
    with open(csv_file, 'w', newline='') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=csv_columns)
        writer.writeheader()
        for (lat, lon, start_date), data in weekly_averages.items():
            end_date = (datetime.strptime(start_date, '%Y-%m-%d') + timedelta(days=6)).strftime('%Y-%m-%d')
            writer.writerow({
                'latitude': lat,
                'longitude': lon,
                'start_date': start_date,
                'end_date': end_date,
                'aqi': data['aqi'],
                'co': data['co'],
                'no': data['no'],
                'no2': data['no2'],
                'o3': data['o3'],
                'so2': data['so2'],
                'pm2_5': data['pm2_5'],
                'pm10': data['pm10'],
                'nh3': data['nh3']
            })
    print(f"Data successfully written to {csv_file}")
except IOError:
    print("I/O error")

csv_file_path = 'weekly_All_24_O.csv'

# Load the CSV file into a DataFrame
df = pd.read_csv(csv_file_path)

# Display the first few rows of the DataFrame
print(df.head(100))